# -*- coding: utf-8 -*-
"""WorkoutPlan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c7ZVpNpyHGhL1j9L76tsZugZYjb6G3QO

#**Importing necessary libraries**
"""

pip install streamlit

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

"""#**Importing dataset**

"""

df = pd.read_csv("megaGymDataset.csv")
df.head()

df.info()

df.describe()

df.columns = df.columns.str.replace('Unnamed: 0', 'index')
df['Equipment'] = df['Equipment'].fillna('None')

"""#**Getting input from user**

#Importing model
"""

from transformers import pipeline, AutoTokenizer, AutoModelForQuestionAnswering

model_name = "bert-large-uncased-whole-word-masking-finetuned-squad"  # Example model, choose one that fits your needs
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForQuestionAnswering.from_pretrained(model_name)

"""#Instantiate question answering pipeline"""

qa_pipeline = pipeline("question-answering", model=model, tokenizer=tokenizer)

"""#Getting answers

"""

import streamlit as st

from transformers import pipeline

# Load the text classification pipeline with a pre-trained model
classifier = pipeline("zero-shot-classification")

# Define the fitness goals
fitness_goals = ["strength", "lean", "cut", "athletic"]
days_available=[2,3,4,5]
level_keywords = ["Beginner", "Intermediate", "Expert"]


# Page title
st.title('Your workout plan guide')

questions = [
    "What is your level at working out : Beginner or Advanced or Expert?",
    "How many days per week can you go to the gym?",
    "What is your goal : Cut or Bulk or Lean or Strength or Athletic ?",
]

# User input
context = st.text_input("Hello, what are you looking for?")

information={}
for question in questions:
    # Get answer from the context using the question answering pipeline
    answer = qa_pipeline(question=question, context=context)
    if iteration==2:
      result=classifier(answer["answer"], fitness_goals)
      max_score = float('-inf')
      for goal, score in zip(result["labels"], result["scores"]):
          if score > max_score:
              max_score = score
              answer['score']=score
              answer["answer"]=goal
    elif iteration==1:
      result=classifier(answer["answer"], days_available)
      max_score = float('-inf')
      for goal, score in zip(result["labels"], result["scores"]):
          if score > max_score:
              max_score = score
              answer['score']=score
              answer["answer"]=goal
    elif iteration==0:
      result=classifier(answer["answer"], level_keywords)
      max_score = float('-inf')
      for goal, score in zip(result["labels"], result["scores"]):
          if score > max_score:
              max_score = score
              answer['score']=score
              answer["answer"]=goal
    while(answer['score']<0.5) :
      x=st.text_input("Can you precise "+question)
      answer = qa_pipeline(question=question, context=x)
    information[question] = answer["answer"]
    print(f"Question: {question}")
    print(f"Answer: {answer['answer']} (with confidence score: {answer['score']:.2f})")

st.write('Table calculated based on user input:')


"""#Extracting answers"""

first_answer = list(information.values())[0]

second_answer = list(information.values())[1]

third_answer = list(information.values())[2]


home = st.text_input("Do you prefer to workout at home?")
if (home=="Yes") :
  equip=st.text_input("what equipment do you have?")
  equipments = equip.split(",")
  equipments.append("None")
  st.write(equipments)

programs={}
Push = [{'Triceps' : 2}, {'Shoulders' : 2} , {'Chest' :3} ]
Pull = [{'Biceps' :2}, {'Forearms' :1}, {'Lats' :1}, {'Middle Back':1}, {'Traps':1}]
Legs = [ {'Abductors' :1} , {'Hamstrings' :2}, {'Quadriceps':2}]
Glutes = [{'Adductors':1}, {'Glutes':1}]
Core = [{'Abdominals' :3}, {'Lower Back':2}]

Upper = Push + Pull
Lower = Legs + Glutes

"""#**Choosing program based on available days and goal**"""

if days==2:
    programs.update({'Upper': Upper})
    programs.update({'Legs' : Legs})
elif days == 3:
    programs['Push'] = Push
    programs['Pull'] = Pull
    programs['Legs'] = Legs
elif days==4:
    programs['Push'] = Push
    programs['Pull'] = Pull
    programs['Legs'] = Legs
    programs['Core'] = Core
elif days == 5:
    programs['Chest'] = Push + ['Chest']
    programs['Back'] = Pull + ['Middle Back']
    programs['Shoulder'] = Push + ['Shoulders']
    programs['Legs'] = Legs
    programs['Core'] = Core
print(programs)

Types=[]
if (goal=="Cut") :
  Types=[{'Cardio' : 0.5},{'Strength' : 0.5}]
elif(goal=="Lean") :
  Types=[{'Cardio' : 0.25},{'Strength' : 0.75}]
elif(goal=="Bulk") :
  Types=[{'Powerlifting' : 0.5},{'Strength' : 0.5}]
elif(goal=="Strength") :
  Types=[{'strongman' : 0.5},{'Strength' : 0.5}]
elif(goal=="Athletic") :
  Types=[{'Plyometrics' : 0.5},{'Olympic Weightlifting' : 0.5}]
print(Types)
print(goal)

key1=list(Types[0].keys())[0]
key2=list(Types[1].keys())[0]
coeff1=Types[0][key1]
coeff2=Types[1][key2]

"""#**Affecting program exercises**"""

from IPython.display import display
selected_program = pd.DataFrame(columns=['Day','BodyPart', 'Type', 'SelectedExercises'])
if(home=="No"):
  for day in programs:
      for part in programs[day]:
        filtered_exercises = df[(df['BodyPart'] == next(iter(part))) & (df['Type'] == key1)]
        top_exercises = filtered_exercises.sort_values(by='Rating', ascending=False).head(round(part[next(iter(part))]*coeff1))
        exercise_titles = top_exercises['Title'].tolist()
        count_exos=len(top_exercises)
        if(count_exos>=0):
          selected_program = pd.concat([selected_program, pd.DataFrame({'Day' : [day] , 'BodyPart': [next(iter(part))], 'Type' : key1 ,'SelectedExercises': [exercise_titles]})], ignore_index=True)

          filtered_exercises_S = df[(df['BodyPart'] == next(iter(part))) & (df['Type'] == key2) & (df['Level'] == level)]
          top_exercises_S = filtered_exercises_S.sort_values(by='Rating', ascending=False).head(part[next(iter(part))]-count_exos)
          exercise_titles_S=top_exercises_S['Title'].tolist()
        selected_program = pd.concat([selected_program, pd.DataFrame({'Day' : [day] , 'BodyPart': [next(iter(part))], 'Type' : key2, 'SelectedExercises': [exercise_titles_S]})], ignore_index=True)
else :
  for day in programs:
      for part in programs[day]:
        filtered_exercises = df[(df['BodyPart'] == next(iter(part))) & (df['Type'] == key1) & df['Equipment'].isin(equipments)]
        top_exercises = filtered_exercises.sort_values(by='Rating', ascending=False).head(round(part[next(iter(part))]*coeff1))
        exercise_titles = top_exercises['Title'].tolist()
        count_exos=len(top_exercises)
        if(count_exos>=0):
          selected_program = pd.concat([selected_program, pd.DataFrame({'Day' : [day] , 'BodyPart': [next(iter(part))], 'Type' : key1 ,'SelectedExercises': [exercise_titles]})], ignore_index=True)

          filtered_exercises_S = df[(df['BodyPart'] == next(iter(part))) & (df['Type'] == key2) & (df['Level'] == level)]
          top_exercises_S = filtered_exercises_S.sort_values(by='Rating', ascending=False).head(part[next(iter(part))]-count_exos)
          exercise_titles_S=top_exercises_S['Title'].tolist()
        selected_program = pd.concat([selected_program, pd.DataFrame({'Day' : [day] , 'BodyPart': [next(iter(part))], 'Type' : key2, 'SelectedExercises': [exercise_titles_S]})], ignore_index=True)
st.write(selected_program)

